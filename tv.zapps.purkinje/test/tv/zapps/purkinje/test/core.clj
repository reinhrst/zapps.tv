(ns tv.zapps.purkinje.test.core
  (:require clojure.string)
  (:use nl.claude.tools.test-tools)
  (:use [tv.zapps.purkinje.core])
  (:use [clojure.test])
  (:use clojure.java.shell))

(defn midentify [url-string]
  (apply merge
         (map #(apply hash-map %)
              (map #(clojure.string/split % #"=" 2)
                   (clojure.string/split-lines
                    (:out
                     (sh "midentify" url-string)))))))
(def fingerprint '(3710765980 3727475368 3693898328 3559680668 2519496281 355232440 371484232 656831069 623275865 2808510300 2938514266 2842109243 690434869 693865910 1767037234 689621138 1767623991 4187609779 4183410994 4204317842 4074294119 4073213058 4140329283 3066587811 2999281505 852322978 985823082 986346729 717648233 180761803 449984873 429076713 446117227 429336779 1502819689 194124961 1236405329 422991067 1496468791 2570214677 3380237589 2910472852 2909685430 2842613430 2875902772 2843408180 2909449012 2909709094 2859120558 3669666612 1454942133 1454154541 1454219819 1386079064 1453187724 1188946733 1184754910 3869074774 3869074078 2794808524 3847834332 2803453654 1700349594 2769375960 1666440925 693295772 1532157594 961712857 424843933 2589104809 425106075 2589375029 2580855333 2564074283 3097799203 2913249829 2863442601 2343447083 2779392673 3836373549 1420782250 1454058090 1989880489 1418270585 1455232698 1451824490 916001981 1447630172 1456575644 1456051548 642880732 642356573 1380555864 1414241628 860396637 1995742552 1414176088 1366474072 1433058650 1391623514 1437230426 1500668698 1504342826 1576170282 1236431659 1232565035 1270313767 725054242 729117447 706040613 710234917 710234951 710234950 2853552996 2853555013 2862926677 2930033380 2729232612 3064521956 3055871204 3064784036 3056133344 2519525096 3576493792 3043555040 1957229800 1978168556 1705534148 1705534150 1839813326 1840862172 1843090389 1838896029 1775948254 1771229663 1230149015 1230213404 1501008029 1534564251 1534565050 1532403002 1532402489 1534503739 3681988410 3679628218 1532407594 3679890347 1514810146 2622124970 2630515562 650671011 902525283 919304354 633958762 625569931 646541665 625569011 588081233 558195921 591752305 590637265 729050325 716466869 1767173813 3669290676 1491397212 3635864692 1557580916 1520719477 3635041868 1422547470 1150571054 113924909 647124301 646599003 647321898 2761774187 2799004233 2732421465 2859821354 2222270826 2993759325 2455841004 2472881324 2471830743 2456497620 3681232045 3647825061 1529566358 1588287159 1395283629 1965479064 1714082963 1722471607 1697567916 1831786139 1722735195 1722733149 1689705293 1691274066 648987482 382659433 1027534152 946785106 3133982058 3109667690 3109677931 3108070688 3113315178 3109249899 3650301738 3650304801 1502844267 2845023016 1267968931 766750098 1737735084 632526253 1687394710 781292950 749835413 781818006 747705494 618224854 3838661852 3838661844 3872217296 3326965976 3326964953 3527764049 3528274001 3528275035 3530369129 3664524397 3664523867 2607555174 3682350629 2523671342 310130222 325900069 929861414 921470766 1458351910 937996068 1391045415 1455787670 1456180118 1388563862 1388566933 1381226908 1398005130 1377032598 1393806485 3910391685 2836646574 2836651966 2838730405 2838727084 2905838779 2838729594 2905836138 2847118187 2914228339 2897384827 2833962091 2901593451 2829767763 2897663323 3970620619 2897726793 1185664149 649541523 1168850568 1454780296 1453995674 1471558578 1453994676 1454782140 1452159674 363804274 1420505716 2492412533 1426929524 2504995698 1550530429 3712956269 3647812949 3377272138 3362463594 3376876397 3377343340 3378915886 3377359214 2347134254 2915854702 2393138910 2908506870 2780579046 2787921114 2234043606 2788218102 2757283030 2253581522 2253581522 2790444205 2723339933 2484264082 2459097506 849009581 2995919629 1385839269 2061445419 714811563 2055813485 2060271021 1789737321 1781115050 1244245355 1780853421 3391464829 2317986010 2854989146 2854524125 2586085973 2518865106 3056224850 975587029 978212565 1968855634 625628322 1699109478 1970165396 1968789142 1699306018 1700353314 1834570580 3843643126 3852030634 3988353842 2908434773 2906337573 2383623595 2368942579 2368942421 2620600621 2662510889 2641540433 2636558689 1525068073 1495708521 1499769673 1558492969 1554295081 2110033226 2110033242 2093320626 1556450042 2026213018 969247961 3099962511 2999299285 2982522005 2856684765 2730584205))

  
(deftest test-fingerprint-generation
  (let [test-url-string (str "file://" (clojure.string/replace (:out (sh "pwd")) #"\n" "/test/tv/zapps/purkinje/test/test.ts"))
        length-ms (* 1000 (Float/parseFloat ((midentify test-url-string) "ID_LENGTH")))
        result (how-long-ms (doall (fingerprint-sequence-from-url-string-for-test test-url-string)))]
    (is (= fingerprint (result 0)) "Fingerprint has changed")
    (is (< -300 (- (result 1) length-ms) 300) ;large flexibility, since midentify is not perfect
        (str "Realtime timing seems wrong, is " (result 1) ", should be " length-ms))))
